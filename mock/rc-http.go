// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-elasticsearch"
	"net/http"
	"sync"
)

var (
	lockRchttpClientMockDo sync.RWMutex
)

// Ensure, that RchttpClientMock does implement elasticsearch.RchttpClient.
// If this is not the case, regenerate this file with moq.
var _ elasticsearch.RchttpClient = &RchttpClientMock{}

// RchttpClientMock is a mock implementation of elasticsearch.RchttpClient.
//
//     func TestSomethingThatUsesRchttpClient(t *testing.T) {
//
//         // make and configure a mocked elasticsearch.RchttpClient
//         mockedRchttpClient := &RchttpClientMock{
//             DoFunc: func(ctx context.Context, req *http.Request) (*http.Response, error) {
// 	               panic("mock out the Do method")
//             },
//         }
//
//         // use mockedRchttpClient in code that requires elasticsearch.RchttpClient
//         // and then make assertions.
//
//     }
type RchttpClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, req *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *http.Request
		}
	}
}

// Do calls DoFunc.
func (mock *RchttpClientMock) Do(ctx context.Context, req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("RchttpClientMock.DoFunc: method is nil but RchttpClient.Do was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *http.Request
	}{
		Ctx: ctx,
		Req: req,
	}
	lockRchttpClientMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockRchttpClientMockDo.Unlock()
	return mock.DoFunc(ctx, req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRchttpClient.DoCalls())
func (mock *RchttpClientMock) DoCalls() []struct {
	Ctx context.Context
	Req *http.Request
} {
	var calls []struct {
		Ctx context.Context
		Req *http.Request
	}
	lockRchttpClientMockDo.RLock()
	calls = mock.calls.Do
	lockRchttpClientMockDo.RUnlock()
	return calls
}
